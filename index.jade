doctype
html.no-js(lang='en')
  head
    meta(charset='utf-8')
    meta(name='description', content='Dan Motzenbecker :: recent works')
    meta(name='viewport', content='width=device-width, initial-scale=1.0, user-scalable=no, minimal-ui')
    meta(name='author', content='Dan Motzenbecker')
    link.monocat(href='css/oxism.css', rel='stylesheet', type='text/css')
    link(href='images/favicon.png', rel='icon', type='image/png')
    link(href='images/favicon-152.png', rel='apple-touch-icon-precomposed')
    title Dan Motzenbecker

  body

    section#grid

      #info
        div
          .cover
            h1 Dan<br>Motzenbecker
            br
            h2 recent<br>works
          .image

      #meta
        div
          .cover
            div
              a.button#email email.
              a.button(href='https://twitter.com/dcmotz') twitter.
              a.button(href='https://github.com/dmotz') github.

      a#oridomi-link.major(href='#oridomi')
        div
          .cover
            h2 OriDomi
          .image

      a#pozaic-link.major(href='#pozaic')
        div
          .cover
            h2 Pozaic
          .image

      a#chaincal-link.major(href='#chaincal')
        div
          .cover
            h2 ChainCal
          .image

      a#hexaflip-link.major(href='#hexaflip')
        div
          .cover
            h2 HexaFlip
          .image

      a#maskew-link.major(href='#maskew')
        div
          .cover
            h2 Maskew
          .image

      a#turingtype-link.major(href='#turingtype')
        div
          .cover
            h2 TuringType
          .image

      a#taxa-link(href='#taxa')
        div
          .cover
            h2 ταξα

      a#stream-snitch-link(href='#stream-snitch')
        div
          .cover
            h2 stream-snitch

      a#ear-pipe-link(href='#ear-pipe')
        div
          .cover
            h2 ear-pipe

      a#statmap-link(href='#statmap')
        div
          .cover
            h2 statmap

      a#commune-link(href='#commune')
        div
          .cover
            h2 Commune

      a#express-spa-router-link(href='#express-spa-router')
        div
          .cover
            h2 Express SPA Router

      a#monocat-link(href='#monocat')
        div
          .cover
            h2 Monocat


    section#perma
      #perma-content
        a#x(href='#') &times;

        #content-oridomi
          h1 OriDomi
          h2 Fold the DOM up like paper.
          .images
            img(src='images/oridomi1.jpg')
            img(src='images/oridomi2.jpg')

          .buttons
            a.button(href='http://oridomi.com') oridomi.com
            a.button(href='https://github.com/dmotz/oriDomi') github
            a.button(href='http://oridomi.com/docs/oridomi.html') annotated source

          p
            | The web is flat, but with OriDomi you can fold it up.
            | Open-source paper-folding library with animation queueing,
            | touch support, and zero dependencies.

          .tools CoffeeScript / JavaScript, CSS3



        #content-pozaic
          h1 Pozaic
          h2 Capture one second moments as animated gif mosaics.
          .images
            img(src='images/pozaic1.jpg')
            img(src='images/pozaic2.gif')

          .buttons
            a.button(href='http://pozaic.com') pozaic.com

          p
            | Pozaic uses WebRTC to connect friends (or strangers) in live
            | video compositions you can turn into animated gifs. The medium
            | captures a single second in time across geographic gaps.

          .tools Node.js, WebRTC, WebSockets, web workers


        #content-chaincal
          h1 ChainCal
          h2 The simple habit building app for iPhone.
          .images
            img(src='images/chaincal1.jpg')
            img(src='images/chaincal2.jpg')

          .buttons
            a.button(href='http://chaincalapp.com') chaincalapp.com

          p
            | Set daily goals and visualize your progress in an intuitive and
            | visual way. Motivate yourself to adopt new positive habits
            | one day at a time.

          .tools CoffeeScript / JavaScript, Apache Cordova, CSS3, Objective-C


        #content-hexaflip
          h1 HexaFlip
          h2 Visualize arrays as cubes.
          .images
            img(src='images/hexaflip1.jpg')
            img(src='images/hexaflip2.jpg')

          .buttons
            a.button(href='http://oxism.com/hexaflip') demo / docs
            a.button(href='https://github.com/dmotz/hexaflip') github
            a.button(href='http://tympanus.net/codrops/2013/03/07/hexaflip-a-flexible-3d-cube-plugin/') codrops article

          p
            | Transform arrays of any length into cubes that can be rotated infinitely.
            | Originally developed as the time picking interface for
            | <a href="#chaincal">ChainCal</a>, I expanded it to visualize
            | arbitrary arrays and wrote an article detailing the process on
            | <a href="http://tympanus.net/codrops/2013/03/07/hexaflip-a-flexible-3d-cube-plugin/">Codrops</a>.

          .tools CoffeeScript / JavaScript, CSS3


        #content-maskew
          h1 Maskew
          h2 Add some diagonal rhythm to your elements.
          .images
            img(src='images/maskew1.jpg')
            img(src='images/maskew2.jpg')

          .buttons
            a.button(href='http://oxism.com/maskew') demo / docs
            a.button(href='https://github.com/dmotz/maskew') github

          p
            | Skew the shapes of elements without distorting their contents.
            | Maskew creates a parallelogram mask over the element and supports
            | touch/mouse manipulation of the skew amount.

          .tools CoffeeScript / JavaScript, CSS3


        #content-turingtype
          h1 TuringType
          h2 A naïve human typing simulation effect.

          .buttons
            a.button(href='http://oxism.com/TuringType') demo / docs
            a.button(href='https://github.com/dmotz/TuringType') github

          p
            | I wrote this quickly to scratch an itch, but it can be convincing enough.
            | Take a look at the demo link above.
          .tools CoffeeScript / JavaScript


        #content-taxa
          h1 Taxa
          h2 A tiny language inside JavaScript to enforce type signatures.

          .buttons
            a.button(href='https://github.com/dmotz/taxa') github
          //-
            pre
              code.
                add = t 'n,n n', (a, b) -&gt; a + b
                add 3, 7
                # =&gt; 10
                add '3', '7'
                # =&gt; Taxa: Expected number as argument 0, given string (3) instead.

          p
            | Taxa is a small metaprogramming experiment that introduces a minimal
            | grammar for type annotations to JavaScript (and by extension, CoffeeScript).
          p
            | Unlike other projects of this nature, Taxa is purely a runtime type checker
            | rather than a static analyzer. When a Taxa-wrapped function receives or returns
            | arguments of the wrong type, an exception is thrown.
          p
            | Further unlike other type declaration projects for JavaScript, Taxa&rsquo;s DSL lives
            | purely within the syntax of the language. There is no intermediary layer and no
            | preprocessing is required.
          p
            | The name derives from the Ancient Greek τάξις (arrangement, order).

          .tools CoffeeScript / JavaScript


        #content-stream-snitch
          h1 stream-snitch
          h2 Event emitter for watching text streams with regex patterns.

          .buttons
            a.button(href='https://github.com/dmotz/stream-snitch') github

          p
            | stream-snitch is a tiny Node module that allows you to match
            | streaming data patterns with regular expressions. It&rsquo;s much like
            | <code>... | grep</code>, but for Node streams using native events
            | and regular expression objects. It&rsquo;s also a good introduction to
            | the benefits of streams if you&rsquo;re unconvinced or unintroduced.

          .tools Node.js


        #content-ear-pipe
          h1 ear-pipe
          h2 Pipe audio streams to your ears.

          .buttons
            a.button(href='https://github.com/dmotz/ear-pipe') github

          p
            | ear-pipe is a duplex stream that allows you to pipe any streaming
            | audio data to your ears (by default), handling any decoding
            | automatically for most formats. You can also leverage this built-in
            | decoding by specifying an output encoding and pipe the output
            | stream somewhere else.

          .tools Node.js


        #content-statmap
          h1 statmap
          h2 Output recursive directory stats as JSON for visualization and analysis.

          .buttons
            a.button(href='https://github.com/dmotz/statmap') github

          p
            | statmap&rsquo;s JSON output will contain a recursive representation of the directory
            | and all children. Each key is a file or directory name with a
            | corresponding value containing a <code>stats</code> object and a <code>children</code>
            | object if it is a directory. Directories also are also given a <code>sum</code>
            | property which reflects the size of all children recursively, unlike
            | the typical <code>size</code> property of directory&rsquo;s <code>stats</code> object.

          .tools Node.js


        #content-commune
          h1 Commune.js
          h2 Web workers lose their chains: Easy threads without separate function files.

          .buttons
            a.button(href='https://github.com/dmotz/commune.js') github

          p
            | Commune.js makes it easy to run computationally heavy functions in a
            | separate thread and retrieve the results asynchronously. By
            | delegating these functions to a separate thread, you can avoid
            | slowing down the main thread that affects the UI. Think of it as a
            | way to leverage the web workers API without ever having to think
            | about the web workers API.
          p
            | Using straightforward syntax, you can add web worker support to your
            | app&rsquo;s functions without the need to create separate files (as web
            | workers typically require) and without the need to change the syntax
            | of your functions. Best of all, everything will work without problems
            | on browsers that do not support web workers.

          .tools CoffeeScript / JavaScript, web workers


        #content-express-spa-router
          h1 Express SPA Router
          h2 Internally reroute non-AJAX requests to your client-side single page app router.

          .buttons
            a.button(href='https://github.com/dmotz/express-spa-router') github

          p
            | Let&rsquo;s say you have a modern single page web application with
            | client-side URL routing (e.g. Backbone).
          p
            | Since views are rendered on the client, you&rsquo;ll likely use RESTful
            | Express routes that handle a single concern and return only JSON
            | back to the client. The app&rsquo;s only non-JSON endpoint is likely the
            | index route (<code>/</code>).
          p
            | So while <code>/users</code> might return a JSON array when hit via the client
            | app&rsquo;s AJAX call, you&rsquo;ll want to handle that request differently if
            | the user clicks a link from an external site or manually types it in
            | the address bar. When hit in this context, this middleware
            | internally redirects the request to the index route handler, so the
            | same client-side app is loaded for every valid route. The URL for
            | the end user remains the same and the client-side app uses its own
            | router to show the user what&rsquo;s been requested based on the route.
            | This eliminates the tedium of performing this kind of conditional
            | logic within individual route callbacks.

          .tools Node.js


        #content-monocat
          h1 Monocat
          h2 Automated asset inlining.

          .buttons
            a.button(href='https://github.com/dmotz/monocat') github

          p
            | Monocat is a small utility ideal for deploying small, static,
            | single-page sites where you want to minimize the number of http
            | requests. Monocat compresses and writes the contents of
            | external assets into the html source for an easy speed
            | optimization.

          .tools Node.js


    script.monocat(src='js/oxism.js')
    script.
      var _gaq = _gaq || [];
      _gaq.push(['_setAccount', 'UA-30392798-1']);
      _gaq.push(['_trackPageview']);
      (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
      })();
